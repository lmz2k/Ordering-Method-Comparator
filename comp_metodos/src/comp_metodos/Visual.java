/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package comp_metodos;

import java.util.Random;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;


/**
 *
 * @author T-Gamer
 */
public class Visual extends javax.swing.JFrame {
    
    

    /**
     * Creates new form Visual
     */
    
    public Visual() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bg_preto = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        btnBBS = new javax.swing.JButton();
        txt_quant = new javax.swing.JSpinner();
        btnIS = new javax.swing.JToggleButton();
        btnQS = new javax.swing.JToggleButton();
        btnRS = new javax.swing.JToggleButton();
        btnShS = new javax.swing.JToggleButton();
        btnSLS = new javax.swing.JToggleButton();
        btnMS = new javax.swing.JToggleButton();
        btnCS = new javax.swing.JToggleButton();
        btnCC = new javax.swing.JToggleButton();
        btnLimpar = new javax.swing.JToggleButton();
        btnGERAR = new javax.swing.JToggleButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txt_imprimir = new javax.swing.JTextArea();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        bg_preto.setBackground(new java.awt.Color(0, 0, 0));

        jLabel1.setText("Insira a quantidade de numero para serem gerados:");

        btnBBS.setText("BubbleSort");
        btnBBS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBBSActionPerformed(evt);
            }
        });

        btnIS.setText("InsertSort");
        btnIS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnISActionPerformed(evt);
            }
        });

        btnQS.setText("QuickSort");
        btnQS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnQSActionPerformed(evt);
            }
        });

        btnRS.setText("RadixSort");
        btnRS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRSActionPerformed(evt);
            }
        });

        btnShS.setText("Shellsort");
        btnShS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShSActionPerformed(evt);
            }
        });

        btnSLS.setText("SelectionSort");
        btnSLS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSLSActionPerformed(evt);
            }
        });

        btnMS.setText("MergeSort");
        btnMS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMSActionPerformed(evt);
            }
        });

        btnCS.setText("CocktailSort");
        btnCS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCSActionPerformed(evt);
            }
        });

        btnCC.setText("Comparar");
        btnCC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCCActionPerformed(evt);
            }
        });

        btnLimpar.setText("Limpar");
        btnLimpar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimparActionPerformed(evt);
            }
        });

        btnGERAR.setText("Gerar Numeros");
        btnGERAR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGERARActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(73, 73, 73)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnShS, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnBBS, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnIS, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnSLS, javax.swing.GroupLayout.DEFAULT_SIZE, 137, Short.MAX_VALUE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(48, 48, 48)
                        .addComponent(txt_quant, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 37, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(btnQS, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnMS, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnCS, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnRS, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(29, 29, 29)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnCC, javax.swing.GroupLayout.DEFAULT_SIZE, 121, Short.MAX_VALUE)
                            .addComponent(btnLimpar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(btnGERAR))
                .addGap(26, 26, 26))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(jLabel1)
                .addGap(10, 10, 10)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txt_quant, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnGERAR))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnBBS)
                    .addComponent(btnIS)
                    .addComponent(btnQS)
                    .addComponent(btnRS)
                    .addComponent(btnCC))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnLimpar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnShS)
                        .addComponent(btnSLS)
                        .addComponent(btnMS)
                        .addComponent(btnCS)))
                .addGap(0, 16, Short.MAX_VALUE))
        );

        txt_imprimir.setColumns(20);
        txt_imprimir.setRows(5);
        txt_imprimir.setText("\n");
        jScrollPane1.setViewportView(txt_imprimir);

        jLabel3.setText("RESULTADOS");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(480, 480, 480)
                                .addComponent(jLabel2))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(237, 237, 237)
                                .addComponent(jLabel3)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 357, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(310, 310, 310))
        );

        javax.swing.GroupLayout bg_pretoLayout = new javax.swing.GroupLayout(bg_preto);
        bg_preto.setLayout(bg_pretoLayout);
        bg_pretoLayout.setHorizontalGroup(
            bg_pretoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, bg_pretoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(bg_pretoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        bg_pretoLayout.setVerticalGroup(
            bg_pretoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(bg_pretoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 383, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(bg_preto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(bg_preto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnBBSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBBSActionPerformed
        
        new Thread() {  
        @Override
        public void run() {

         int arr[] = new int[geral];
         for (int i = 0; i < geral; i++) {   
         String a = auxiliar.get(i);
         int b =  Integer.parseInt(a);
         arr[i] = b;  
               }
         long tempoInicial = System.nanoTime()/1000;
         Metodos.bubbleSort(arr);
         long tempoFinal = System.nanoTime()/1000;
         txt_imprimir.append("\nOrdenando com método BubbleSort: \n");
         for (int i = 0; i < arr.length; i++) {
            txt_imprimir.append(arr[i]+", ");
        }
        dados.add(new results ("BubbleSort",(tempoFinal - tempoInicial),geral));
        txt_imprimir.append("\n Método demorou = " + (tempoFinal - tempoInicial) + " ms \n");
        txt_imprimir.append("-----------------------------------------------"
                + "----------------------------------------------------------"
                + "-------------------------------------------------------------"
                + "----------------------------------------------------------------- \n");
        }
        }.start();       
       
         
    }//GEN-LAST:event_btnBBSActionPerformed

    private void btnISActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnISActionPerformed
        new Thread() {
        @Override
        public void run() {
        
        
         int arr[] = new int[geral];
         for (int i = 0; i < geral; i++) {   
         String a = auxiliar.get(i);
         int b =  Integer.parseInt(a);
         arr[i] = b;  
   
               }

         txt_imprimir.append("\n");
         long tempoInicial = System.nanoTime()/1000;
         Metodos.insertSort(arr);
         long tempoFinal = System.nanoTime()/1000;
         txt_imprimir.append("Ordenando com método InsertSort: \n");
         for (int i = 0; i < arr.length; i++) {
            txt_imprimir.append(arr[i]+", ");
        }
        //calculando tempo para mostrar
        dados.add(new results ("Insert Sort",(tempoFinal - tempoInicial),geral));
        txt_imprimir.append("\n Método demorou = " + (tempoFinal - tempoInicial) + " ms \n");
         txt_imprimir.append("-----------------------------------------------"
                + "----------------------------------------------------------"
                + "-------------------------------------------------------------"
                + "-----------------------------------------------------------------\n");
        }
        }.start();
    }//GEN-LAST:event_btnISActionPerformed

    private void btnLimparActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimparActionPerformed
        txt_imprimir.setText(null);        // TODO add your handling code here:
    }//GEN-LAST:event_btnLimparActionPerformed

    private void btnQSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnQSActionPerformed
        new Thread() {
        @Override
        public void run() {
        
        
         int arr[] = new int[geral];
         for (int i = 0; i < geral; i++) {   
         String a = auxiliar.get(i);
         int b =  Integer.parseInt(a);
         arr[i] = b;  
   
               }
        
         txt_imprimir.append("\n");
         long tempoInicial = System.nanoTime()/1000;
         metodosInterface.sort(arr);
         long tempoFinal = System.nanoTime()/1000;
        txt_imprimir.append("Ordenando com método QuickSort:  \n");
         for (int i = 0; i < arr.length; i++) {
            txt_imprimir.append(arr[i]+", ");
        }

        dados.add(new results ("Quick Sort",(tempoFinal - tempoInicial),geral));
        txt_imprimir.append("\n Método demorou = " + (tempoFinal - tempoInicial) + " ms \n");
        txt_imprimir.append("-----------------------------------------------"
                + "----------------------------------------------------------"
                + "-------------------------------------------------------------"
                + "----------------------------------------------------------------- \n");
        }
        }.start();
    }//GEN-LAST:event_btnQSActionPerformed

    private void btnRSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRSActionPerformed
        new Thread() {
            
        @Override
        public void run() {
     
        
        int arr[] = new int[geral];
         for (int i = 0; i < geral; i++) {   
         String a = auxiliar.get(i);
         int b =  Integer.parseInt(a);
         arr[i] = b;  
   
               }
         txt_imprimir.append("\n");
         long tempoInicial = System.nanoTime()/1000;
         metodosInterface.radixSort(arr);
         long tempoFinal = System.nanoTime()/1000;
         txt_imprimir.append("Ordenando com método RadixSort: \n");
         for (int i = 0; i < arr.length; i++) {
            txt_imprimir.append(arr[i]+", ");
        }
     
        dados.add(new results ("Radix Sort",(tempoFinal - tempoInicial),geral));
        txt_imprimir.append("\n Método demorou = " + (tempoFinal - tempoInicial) + " ms \n");
        txt_imprimir.append("-----------------------------------------------"
                + "----------------------------------------------------------"
                + "-------------------------------------------------------------"
                + "----------------------------------------------------------------- \n");
        }
        }.start();
    }//GEN-LAST:event_btnRSActionPerformed

    private void btnShSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShSActionPerformed
        new Thread() {
            
        @Override   
        public void run() {
        
        
         int arr[] = new int[geral];
         for (int i = 0; i < geral; i++) {   
         String a = auxiliar.get(i);
         int b =  Integer.parseInt(a);
         arr[i] = b;  
   
               }
         txt_imprimir.append("\n");
         long tempoInicial = System.nanoTime()/1000;
         metodosInterface.shellSort(arr);
         long tempoFinal = System.nanoTime()/1000;
         txt_imprimir.append("ordenando com método ShellSort: \n");
         for (int i = 0; i < arr.length; i++) {
            txt_imprimir.append(arr[i]+", ");
        }
        //calculando tempo para mostrar
        dados.add (new results ("Shell Sort",(tempoFinal - tempoInicial),geral));
        txt_imprimir.append("\n Metodo demorou = " + (tempoFinal - tempoInicial) + " ms \n");
        txt_imprimir.append("-----------------------------------------------"
                + "----------------------------------------------------------"
                + "-------------------------------------------------------------"
                + "----------------------------------------------------------------- \n");
        }
        }.start();
    }//GEN-LAST:event_btnShSActionPerformed

    private void btnSLSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSLSActionPerformed
        new Thread() {
            
            
        @Override   
        public void run() {
      
        
         int arr[] = new int[geral];
         for (int i = 0; i < geral; i++) {   
         String a = auxiliar.get(i);
         int b =  Integer.parseInt(a);
         arr[i] = b;  
   
               }
         txt_imprimir.append("\n");
         long tempoInicial = System.nanoTime()/1000;
         metodosInterface.SelectionSort(arr);
         long tempoFinal = System.nanoTime()/1000;
         txt_imprimir.append("ordenando com método SelectionSort: \n");
         for (int i = 0; i < arr.length; i++) {
            txt_imprimir.append(arr[i]+", ");
        }
        //calculando tempo para mostrar
        dados.add(new results ("Selection Sort",(tempoFinal - tempoInicial),geral));
        txt_imprimir.append("\n Metodo demorou = " + (tempoFinal - tempoInicial) + " ms \n\n");
        txt_imprimir.append("-----------------------------------------------"
                + "----------------------------------------------------------"
                + "-------------------------------------------------------------"
                + "----------------------------------------------------------------- \n");
        }
        }.start();
    }//GEN-LAST:event_btnSLSActionPerformed

    private void btnMSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMSActionPerformed
        new Thread() {
  
        @Override   
        public void run() {
        
        
         int arr[] = new int[geral];
         for (int i = 0; i < geral; i++) {   
         String a = auxiliar.get(i);
         int b =  Integer.parseInt(a);
         arr[i] = b;  
   
               }
         txt_imprimir.append("\n");
         long tempoInicial = System.nanoTime()/1000;
         metodosInterface.mergeSort(arr);
         long tempoFinal = System.nanoTime()/1000;
         txt_imprimir.append("ordenando com método MergeSort: \n");
         for (int i = 0; i < arr.length; i++) {
            txt_imprimir.append(arr[i]+", ");
        }
        //calculando tempo para mostrar
        dados.add(new results ("Merge Sort",(tempoFinal - tempoInicial),geral));
        txt_imprimir.append("\n Metodo demorou = " + (tempoFinal - tempoInicial) + " ms \n");
         txt_imprimir.append("-----------------------------------------------"
                + "----------------------------------------------------------"
                + "-------------------------------------------------------------"
                + "----------------------------------------------------------------- \n");
        }
        }.start();
    }//GEN-LAST:event_btnMSActionPerformed

    private void btnCSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCSActionPerformed
        new Thread() {
            
            
            
        @Override    
        public void run() {
        
        
         int arr[] = new int[geral];
         for (int i = 0; i < geral; i++) {   
         String a = auxiliar.get(i);
         int b =  Integer.parseInt(a);
         arr[i] = b;  
   
               }
         txt_imprimir.append("\n");
         long tempoInicial = System.nanoTime()/1000;
         metodosInterface.cocktailSort(arr);
         long tempoFinal = System.nanoTime()/1000;
         txt_imprimir.append("ordenando com método CocktailSort: \n");
         for (int i = 0; i < arr.length; i++) {
            txt_imprimir.append(arr[i]+", ");
        }
        //calculando tempo para mostrar
        dados.add(new results ("Cocktail Sort",(tempoFinal - tempoInicial),geral));
        txt_imprimir.append("\n Metodo demorou = " + (tempoFinal - tempoInicial) + " ms \n"); 
        txt_imprimir.append("-----------------------------------------------"
                + "----------------------------------------------------------"
                + "-------------------------------------------------------------"
                + "----------------------------------------------------------------- \n");
        }
        }.start();
    }//GEN-LAST:event_btnCSActionPerformed

    private void btnCCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCCActionPerformed
       
   Comparator crescente = new comp(true);
        Collections.sort (dados, crescente);
        
        for (int i = 0; i < dados.size(); i++) {
            txt_imprimir.append(
                    "\nMetodo: " + dados.get(i).nome + "\n" 
                    + "Tempo de execução : " + dados.get(i).tempo + " ms\n" 
                    + "Quantidade de Numeros: " +  dados.get(i).VetT + "\n");
        }
        
    }//GEN-LAST:event_btnCCActionPerformed

    private void btnGERARActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGERARActionPerformed
         Integer qtt =(Integer) txt_quant.getValue(); 
         geral = qtt;
         txt_imprimir.append("Listando "+qtt+" numeros gerados aleatoriamente:\n");
         int arr[] = new int[qtt];
         vetor(arr);
    }//GEN-LAST:event_btnGERARActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Visual.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Visual.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Visual.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Visual.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Visual().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel bg_preto;
    private javax.swing.JButton btnBBS;
    private javax.swing.JToggleButton btnCC;
    private javax.swing.JToggleButton btnCS;
    private javax.swing.JToggleButton btnGERAR;
    private javax.swing.JToggleButton btnIS;
    private javax.swing.JToggleButton btnLimpar;
    private javax.swing.JToggleButton btnMS;
    private javax.swing.JToggleButton btnQS;
    private javax.swing.JToggleButton btnRS;
    private javax.swing.JToggleButton btnSLS;
    private javax.swing.JToggleButton btnShS;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea txt_imprimir;
    private javax.swing.JSpinner txt_quant;
    // End of variables declaration//GEN-END:variables
 
    
Metodos metodosInterface = new Metodos();
ArrayList<results> dados = new ArrayList<>();
ArrayList<String> auxiliar = new ArrayList<>();
int geral;


public void vetor(int input[]){
    
          Random aleatorio = new Random();
          for (int i = 0; i < input.length; i++) {
          input[i] =aleatorio.nextInt(1000);
          txt_imprimir.append(input[i]+", "); 
          
          } 
          
          txt_imprimir.append("\n ");
          for (int i = 0; i < input.length; i++) {
            auxiliar.add(Integer.toString(input[i]));
            
          }
         txt_imprimir.append("\n"); 

      }



public class results {
    
    String nome; 
    long tempo; 
    int VetT;
   
    public results(String n, long i, int t) {
        nome = n; tempo = i; VetT = t;
    }
    
     
   }
  
 public class comp implements Comparator {
    boolean crescente = true;
    public comp(boolean crescente) {
        this.crescente = crescente;
    }

        
    @Override
    public int compare(Object X, Object Y) {
        results A = (results) X;
        results B = (results) Y;
        if (crescente) {
            return A.tempo < B.tempo ? -1 : (A.tempo > B.tempo ? +1 : 0);
        } else {
            return A.tempo < B.tempo ? +1 : (A.tempo > B.tempo ? -1 : 0);
        }
   
  } }
}
